service: social-dashboard

frameworkVersion: '2'
variablesResolutionMode: 20210326
projectDir: ../

plugins:
  - serverless-domain-manager

package:
  individually: true

custom:
  appPrefix: social-dashboard
  customDomains:
    - http:
        certificateName: ${file(../configuration.json):terraform_domain}
        domainName: ${file(../configuration.json):terraform_subdomain}-api.${file(../configuration.json):terraform_domain}
        basePath: ''
        stage: ${self:provider.stage}
        endpointType: 'regional'
        createRoute53Record: true
        securityPolicy: tls_1_2

provider:
  architecture: arm64
  lambdaHashingVersion: 20201221
  name: aws
  stage: ${opt:stage, "prod"}
  region: eu-central-1
  runtime: nodejs14.x
  memorySize: 1024
  timeout: 10
  logRetentionInDays: 14
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:*
      Resource:
        - arn:aws:dynamodb:*:${aws:accountId}:table/${self:custom.appPrefix}-platform-data
  httpApi:
    cors:
      allowedOrigins:
        - '*'
      allowedHeaders:
        - '*'
      allowedMethods:
        - GET
      maxAge: 10

layers:
  base:
    package:
      artifact: deploy/layer-base.zip
    name: ${self:custom.appPrefix}-layer
    compatibleRuntimes:
      - nodejs14.x
    compatibleArchitectures:
      - arm64
    retain: false

functions:
  socialApi:
    package:
      patterns:
        - '!node_modules/**'
        - '!tmp/**'
        - '!deploy/**'
        - 'social-api.js'
        - 'platform/**'
        - '../configuration.json'
    handler: social-api.handler
    name: ${self:custom.appPrefix}-api
    reservedConcurrency: 1
    layers:
      - { Ref: BaseLambdaLayer }
    events:
      - httpApi:
          path: /{proxy+}
          method: GET
    environment:
      TABLE_NAME: ${self:custom.appPrefix}-platform-data
  socialCrawler:
    package:
      patterns:
        - '!node_modules/**'
        - '!tmp/**'
        - '!deploy/**'
        - 'social-crawler.js'
        - 'platform/**'
        - '../configuration.json'
    handler: social-crawler.handler
    name: ${self:custom.appPrefix}-crawler
    reservedConcurrency: 1
    layers:
      - { Ref: BaseLambdaLayer }
    events:
      - schedule:
          rate: rate(15 minutes)
    environment:
      TABLE_NAME: ${self:custom.appPrefix}-platform-data
  socialAggregator:
    package:
      patterns:
        - '!node_modules/**'
        - '!tmp/**'
        - '!deploy/**'
        - 'social-aggregator.js'
        - 'platform/**'
        - '../configuration.json'
    handler: social-aggregator.handler
    name: ${self:custom.appPrefix}-aggregator
    reservedConcurrency: 1
    layers:
      - { Ref: BaseLambdaLayer }
    events:
      - schedule:
          rate: rate(1 day)
    environment:
      TABLE_NAME: ${self:custom.appPrefix}-platform-data

resources:
  Resources:
    socialData:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.appPrefix}-platform-data
        AttributeDefinitions:
          - AttributeName: platform
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: platform
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
